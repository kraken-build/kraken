name: "Python"

on:
  push: { branches: [ "develop" ], tags: [ "*" ] }
  pull_request: { branches: [ "*" ] }

env:
  COLUMNS: 200

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.10"
          - python-version: "3.11"
          - python-version: "3.12"
          - python-version: "3.x"
    steps:
    - uses: actions/checkout@v3
    - uses: NiklasRosenstein/slap@gha/install/v1
    - uses: actions/setup-python@v4
      with: { python-version: "${{ matrix.python-version }}" }
    - run: pip install pipx && pipx install poetry && pipx install pdm && pipx install kraken-wrapper==0.32.4
    - run: rustup update

    - name: Restore Kraken build cache
      uses: actions/cache/restore@v4
      with:
        path: build
        key: build-cache:${{ runner.os }}:${{ hashFiles('.kraken.lock') }}

    - name: Restore Venv
      uses: actions/cache/restore@v4
      with:
        path: .venvs/
        key: build-cache:${{ runner.os }}:venv:${{ matrix.python-version }}

    # Explicitly mention python.install to ensure that Pip install is rerun.
    - run: krakenw run python.install check lint test -vv

    - name: Save Venv
      uses: actions/cache/save@v4
      with:
        path: .venvs/
        key: build-cache:${{ runner.os }}:venv:${{ matrix.python-version }}

    - name: Save Kraken build cache
      uses: actions/cache/save@v4
      with:
        path: build
        key: build-cache:${{ runner.os }}:${{ hashFiles('.kraken.lock') }}

  # kraken-std-integration-test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - python-version: "3.10"
  #           test-type: integrationTest

  #   steps:
  #   - uses: actions/checkout@v3
  #     with: { fetch-depth: 0 }
  #   - uses: NiklasRosenstein/slap@gha/install/v1
  #   - uses: actions/setup-python@v4
  #     with: { python-version: "${{ matrix.python-version }}" }
  #   - run: pip install pipx && pipx install kraken-wrapper

  #   # Need Poetry and PDM for integration tests.
  #   - run: pipx install poetry
  #   - run: curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -

  #   # Make sure we have Docker available for the ete-tests.
  #   - uses: docker/setup-buildx-action@v2

  #   - run: cd kraken-std && krakenw -v run ${{ matrix.test-type }} -v
  #     env:
  #       ARTIFACTORY_CARGO_REPOSITORY: ${{ vars.ARTIFACTORY_CARGO_REPOSITORY }}
  #       CLOUDSMITH_CARGO_REPOSITORY: ${{ vars.CLOUDSMITH_CARGO_REPOSITORY }}
  #       CLOUDSMITH_INTEGRATION_TEST_CREDENTIALS: |
  #         {
  #           "api_key": "${{ secrets.CLOUDSMITH_API_KEY }}",
  #           "owner": "${{ vars.CLOUDSMITH_OWNER }}",
  #           "user": "${{ vars.CLOUDSMITH_USER }}"
  #         }
  #       ARTIFACTORY_INTEGRATION_TEST_CREDENTIALS: |
  #         {
  #           "token": "${{ secrets.ARTIFACTORY_TOKEN }}",
  #           "url": "${{ vars.ARTIFACTORY_URL }}",
  #           "user": "${{ vars.ARTIFACTORY_USER }}"
  #         }
